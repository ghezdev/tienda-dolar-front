{"version":3,"sources":["components/atoms/color.js","utils/colorUsername.js","utils/player.js","utils/localStorage.js","components/atoms/unit.js","views/register/styles.js","components/atoms/fontSize.js","views/register/index.jsx","utils/countUp.js","hooks/computer.js","containers/playersNow/styles.js","containers/playersNow/index.jsx","containers/timer/styles.js","containers/timer/index.jsx","utils/chart.js","containers/statistics/index.jsx","containers/feedback/styles.js","containers/feedback/index.jsx","utils/like.js","components/organisms/post/styles.js","components/organisms/post/index.jsx","views/game/styles.js","views/game/index.jsx","App-styles.js","App.js","reportWebVitals.js","index.js"],"names":["WINDOW_BG","WINDOW_BORDER","POST_BORDER","POST_BG_WHITE","USERNAME_PURPLE","USERNAME_BLUE","USERNAME_GREEN","USERNAME_YELLOW","USERNAME_ORANGE","USERNAME_RED","USERNAME_GREY","USERNAME_WHITE","LIKE_WAITING","selectColor","counter","COLORS","didPlayPlayer","getLocalStorage","KEY_PLAYER","timing","PLAYER_START_STRUCTURE","canItClick","colorUsername","getComputersCanPlayAndDidNotClick","KEY_COMPUTERS","filter","computer","getPlayersCanPlay","computers","player","push","KEY_LIKES","key","JSON","parse","localStorage","getItem","setLocalStorage","something","setItem","stringify","Users","map","index","id","username","UNIT_5","UNIT_10","UNIT_25","UNIT_200","UNIT_300","registerForm","backgroundColor","border","borderRadius","UNITS","width","padding","display","flexDirection","alignItems","title","fontSize","textField","marginBottom","img","button","marginTop","useStyles","makeStyles","centerAdornment","marginLeft","centerText","textAlign","Player","setShowGame","classes","useState","error","setError","playerName","setPlayerName","Box","sx","styles","src","alt","style","TextField","variant","placeholder","value","onChange","e","target","inputProps","fullWidth","autoComplete","helperText","Typography","className","Button","onClick","playersOnline","length","buildPlayer","configCountUp","isCounting","start","end","decimalPlaces","duration","easing","random","Math","Number","toFixed","useComputer","timingComputer","setTimingComputer","selectRandomComputer","computersWhoDidNotClick","indexComputerRandom","trunc","computerClick","computerDidClick","indexComputerDidClick","setComputerWhoClicked","players","playersTitle","playersTitleFont","color","fontWeight","playersBody","itemPlayer","imgProfile","PlayersNow","playersWhoArePlaying","Stack","spacing","divider","Divider","margin","contentBody","justifyContent","timer","Timer","reset","setShowStatistics","setPlayersWhoArePlaying","onPress","timerClicked","disabled","buildData","dataChart","getPlayers","forEach","idColor","buildConfig","data","labels","datasets","options","plugins","legend","scales","y","ticks","stepSize","beginAtZero","Statistics","setDataChart","useEffect","height","feedback","countLikes","colorDislike","isEnabled","Feedback","setCountLikes","like","setLike","dislike","setDislike","IconButton","count","START_LIKES","post","marginRight","content","contentTitle","lineHeight","posted","Post","leftBar","chip","children","app","stack","Game","useCountUp","showStatistics","updatePlayersWhoArePlaying","Chip","label","size","container","App","showLogin","setShowLogin","showGame","Container","maxWidth","CSSTransition","in","timeout","classNames","unmountOnExit","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","theme","createTheme","palette","primary","main","ReactDOM","render","StrictMode","ThemeProvider","document","getElementById"],"mappings":"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","file":"static/js/main.2f4a3ab3.chunk.js","sourcesContent":["const WINDOW_BG = \"white\";\r\nconst WINDOW_BORDER = \"#CCCCCC\";\r\n\r\nexport const POST_BORDER = WINDOW_BORDER;\r\nexport const POST_BG_GREY = \"#f8f9fa\";\r\nexport const POST_BG_WHITE = WINDOW_BG;\r\n\r\nexport const POST_POSTED = \"grey\";\r\nexport const POST_TITLE = \"black\";\r\n\r\nexport const USERNAME_PURPLE = \"#9966FF\";\r\nexport const USERNAME_BLUE = \"#3743D6\";\r\nexport const USERNAME_GREEN = \"#37C046\";\r\nexport const USERNAME_YELLOW = \"#DBCF0B\";\r\nexport const USERNAME_ORANGE = \"#FF9F40\";\r\nexport const USERNAME_RED = \"#F13737\";\r\nexport const USERNAME_GREY = \"#808080\";\r\nexport const USERNAME_WHITE = \"#DADADA\";\r\n\r\nexport const PLAYERSLIST_BG_GREY = \"#545452\";\r\nexport const PLAYERSLIST_BG_WHITE = WINDOW_BG;\r\nexport const PLAYERSLIST_TITLE_WHITE = \"white\";\r\nexport const PLAYERSLIST_BORDER = WINDOW_BORDER;\r\n\r\nexport const PRIMARY_BUTTON = \"#0079D3\";\r\nexport const ERROR_BUTTON = \"red\";\r\nexport const LIKE_WAITING = \"#727273\";\r\n\r\nexport const PRIMARY = \"#FF4500\";","import * as COLORS from \"../components/atoms/color\";\r\n\r\nconst selectColor = (counter) => {\r\n  if (counter >= 52 && counter <= 60) return COLORS.USERNAME_PURPLE;\r\n  if (counter >= 42 && counter <= 51.99) return COLORS.USERNAME_BLUE;\r\n  if (counter >= 32 && counter <= 41.99) return COLORS.USERNAME_GREEN;\r\n  if (counter >= 22 && counter <= 31.99) return COLORS.USERNAME_YELLOW;\r\n  if (counter >= 12 && counter <= 21.99) return COLORS.USERNAME_ORANGE;\r\n  if (counter >= 0 && counter <= 11.99) return COLORS.USERNAME_RED;\r\n};\r\n\r\nconst colorIdentifier = (color) => {\r\n  if (color == COLORS.USERNAME_PURPLE) return 0\r\n  if (color == COLORS.USERNAME_BLUE) return 1;\r\n  if (color == COLORS.USERNAME_GREEN) return 2;\r\n  if (color == COLORS.USERNAME_YELLOW) return 3;\r\n  if (color == COLORS.USERNAME_ORANGE) return 4;\r\n  if (color == COLORS.USERNAME_RED) return 5;\r\n  if (color == COLORS.USERNAME_GREY) return 6;\r\n  if (color == COLORS.USERNAME_WHITE) return 7;\r\n}\r\n\r\nexport { selectColor, colorIdentifier };\r\n","import Users from \"../mocks/users.json\";\r\nimport {\r\n  KEY_PLAYER,\r\n  KEY_COMPUTERS,\r\n  getLocalStorage,\r\n  setLocalStorage,\r\n} from \"./localStorage\";\r\nimport { selectColor } from \"./colorUsername\";\r\nimport * as COLORS from \"../components/atoms/color\";\r\n\r\n/* -------------------- UTILS -------------------- */\r\n\r\nconst didItClick = (timing) => timing !== -1;\r\nconst didNotItClick = (timing) => !didItClick(timing);\r\nconst didPlayPlayer = () => getLocalStorage(KEY_PLAYER)?.timing != -1;\r\n\r\nconst PLAYER_START_STRUCTURE = {\r\n  timing: -1,\r\n  canItClick: true,\r\n  colorUsername: COLORS.USERNAME_GREY,\r\n};\r\n\r\n/* -------------------- GETS -------------------- */\r\n\r\nconst getComputers = () => {\r\n  const computers = Users;\r\n\r\n  return computers.map((computer, index) => {\r\n    if (index == 6) {\r\n      return {\r\n        id: computer.id,\r\n        username: computer.username,\r\n        ...PLAYER_START_STRUCTURE,\r\n        canItClick: false,\r\n        colorUsername: COLORS.USERNAME_WHITE,\r\n      };\r\n    }\r\n    return {\r\n      id: computer.id,\r\n      username: computer.username,\r\n      ...PLAYER_START_STRUCTURE,\r\n    };\r\n  });\r\n};\r\n\r\nconst getComputersWhoDidNotClick = () => {\r\n  const computers = getLocalStorage(KEY_COMPUTERS);\r\n  return computers.filter((computer) => didNotItClick(computer.timing));\r\n};\r\n\r\nconst getComputersCanPlayAndDidNotClick = () => {\r\n  const computersWhoDidNotClick = getComputersWhoDidNotClick();\r\n  return computersWhoDidNotClick.filter((computer) => computer.canItClick);\r\n};\r\n\r\nconst getPlayers = () => {\r\n  const computers = getLocalStorage(KEY_COMPUTERS);\r\n  const player = getLocalStorage(KEY_PLAYER);\r\n  computers.push(player);\r\n  return computers;\r\n};\r\n\r\nconst getPlayersCanPlay = () => {\r\n  const computers = getLocalStorage(KEY_COMPUTERS);\r\n  const player = getLocalStorage(KEY_PLAYER);\r\n  computers.push(player);\r\n  return computers.filter((player) => player.canItClick);\r\n};\r\n\r\n/* -------------------- SETS -------------------- */\r\n\r\nconst setComputerWhoClicked = (computerDidClick, timingComputer) => {\r\n  const computer = getLocalStorage(KEY_COMPUTERS);\r\n\r\n  /* OPCIÓN 1 */\r\n  const indexComputerDidClick = computerDidClick.id - 1;\r\n\r\n  /* OPCIÓN 2 */\r\n  // const indexComputerDidClick = computer.findIndex(\r\n  //   (computer) => computer.id == computerDidClick.id\r\n  // );\r\n\r\n  computer[indexComputerDidClick].timing = timingComputer;\r\n  computer[indexComputerDidClick].colorUsername = selectColor(timingComputer);\r\n  setLocalStorage(KEY_COMPUTERS, computer);\r\n};\r\n\r\n/* -------------------- BUILDERS -------------------- */\r\n\r\nconst buildPlayer = (playerName) => {\r\n  const playersOnline = getLocalStorage(KEY_COMPUTERS);\r\n  return {\r\n    id: playersOnline.length + 1,\r\n    username: playerName,\r\n    ...PLAYER_START_STRUCTURE,\r\n  };\r\n};\r\n\r\nexport {\r\n  getComputers,\r\n  getPlayers,\r\n  getComputersCanPlayAndDidNotClick,\r\n  getPlayersCanPlay,\r\n  didPlayPlayer,\r\n  setComputerWhoClicked,\r\n  buildPlayer,\r\n};\r\n","import { getComputers } from \"./player\";\r\n\r\nconst KEY_LIKES = \"likes\";\r\nconst KEY_PLAYER = \"player\";\r\nconst KEY_COMPUTERS = \"computers\";\r\n\r\nconst getLocalStorage = (key) => JSON.parse(localStorage.getItem(key));\r\nconst setLocalStorage = (key, something) =>\r\n  localStorage.setItem(key, JSON.stringify(something));\r\n\r\nif (!getLocalStorage(KEY_COMPUTERS)) {\r\n  const computers = getComputers();\r\n  setLocalStorage(KEY_COMPUTERS, computers);\r\n}\r\n\r\nexport {\r\n  KEY_PLAYER,\r\n  KEY_COMPUTERS,\r\n  KEY_LIKES,\r\n  getLocalStorage,\r\n  setLocalStorage,\r\n};\r\n","export const UNIT_5 = \"5px\";\r\nexport const UNIT_10 = \"10px\";\r\nexport const UNIT_15 = \"15px\";\r\nexport const UNIT_20 = \"20px\";\r\nexport const UNIT_25 = \"25px\";\r\nexport const UNIT_30 = \"30px\";\r\nexport const UNIT_35 = \"35px\";\r\nexport const UNIT_40 = \"40px\";\r\nexport const UNIT_45 = \"45px\";\r\nexport const UNIT_50 = \"50px\";\r\nexport const UNIT_100 = \"100px\";\r\nexport const UNIT_150 = \"150px\";\r\nexport const UNIT_200 = \"200px\";\r\nexport const UNIT_250 = \"250px\";\r\nexport const UNIT_300 = \"300px\";\r\nexport const UNIT_350 = \"350px\";\r\nexport const UNIT_400 = \"400px\";\r\nexport const UNIT_450 = \"450px\";\r\nexport const UNIT_500 = \"500px\";\r\nexport const UNIT_550 = \"550px\";\r\nexport const UNIT_600 = \"600px\";\r\nexport const UNIT_650 = \"650px\";\r\nexport const UNIT_700 = \"700px\";\r\nexport const UNIT_800 = \"800px\";\r\nexport const UNIT_900 = \"900px\";\r\nexport const UNIT_1000 = \"1000px\";\r\n","import * as FONTSIZES from \"../../components/atoms/fontSize\";\r\nimport * as COLORS from \"../../components/atoms/color\";\r\nimport * as UNITS from \"../../components/atoms/unit\";\r\n\r\nconst registerForm = {\r\n  backgroundColor: COLORS.POST_BG_WHITE,\r\n  border: `1px solid ${COLORS.POST_BORDER}`,\r\n  borderRadius: UNITS.UNIT_5,\r\n  width: UNITS.UNIT_400,\r\n  padding: UNITS.UNIT_15,\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst title = { fontSize: FONTSIZES.FONT_VERY_BIG };\r\n\r\nconst textField = { marginBottom: UNITS.UNIT_20 };\r\n\r\nconst img = { width: UNITS.UNIT_200 };\r\n\r\nconst button = { marginTop: UNITS.UNIT_10 };\r\n\r\nexport { registerForm, title, textField, img, button };\r\n","export const FONT_TINY_SMALL = \"12px\";\r\nexport const FONT_SMALL = \"14px\";\r\nexport const FONT_BIG_SMALL = \"16px\";\r\nexport const FONT_NORMAL = \"18px\";\r\nexport const FONT_VERY_BIG = \"32px\";\r\nexport const FONT_TIMER = \"120px\";\r\n","import React, { useState } from \"react\";\r\nimport { TextField, Button, Box, Typography } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { buildPlayer } from \"../../utils/player\";\r\nimport { KEY_PLAYER, setLocalStorage } from \"../../utils/localStorage\";\r\nimport * as styles from \"./styles\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n  centerAdornment: {\r\n    marginLeft: \"50%\",\r\n  },\r\n  centerText: {\r\n    textAlign: \"center\",\r\n  },\r\n}));\r\n\r\nfunction Player({ setShowGame }) {\r\n  const classes = useStyles();\r\n\r\n  const [error, setError] = useState(false);\r\n  const [playerName, setPlayerName] = useState(\"\");\r\n\r\n  const registerPlayer = () => {\r\n    if (playerName !== \"\") {\r\n      const player = buildPlayer(playerName);\r\n      setLocalStorage(KEY_PLAYER, player);\r\n\r\n      setShowGame();\r\n    } else setError(true);\r\n  };\r\n\r\n  const handleOnChange = (e) => setPlayerName(e.target.value);\r\n\r\n  return (\r\n    <Box sx={styles.registerForm}>\r\n      <img\r\n        src=\"https://logos-download.com/wp-content/uploads/2016/06/Reddit_logo_full_1.png\"\r\n        alt=\"Reddit logo\"\r\n        style={styles.img}\r\n      />\r\n      <h1 style={styles.title}>Sign up!</h1>\r\n      <TextField\r\n        variant=\"standard\"\r\n        placeholder=\"Nickname\"\r\n        value={playerName}\r\n        onChange={handleOnChange}\r\n        inputProps={{\r\n          style: { textAlign: \"center\" },\r\n        }}\r\n        fullWidth\r\n        autoComplete=\"off\"\r\n        style={styles.textField}\r\n        error={error}\r\n        helperText={\r\n          error && (\r\n            <Typography\r\n              variant=\"caption\"\r\n              className={classes.centerText}\r\n              display=\"block\"\r\n            >\r\n              It can't be empty!\r\n            </Typography>\r\n          )\r\n        }\r\n      />\r\n      <Button\r\n        variant=\"contained\"\r\n        onClick={registerPlayer}\r\n        style={styles.button}\r\n      >\r\n        SIGN UP\r\n      </Button>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Player;\r\n","const START_TIMING = 60;\r\nconst END_TIMING = 0;\r\nconst WAITING_TIMING = -1;\r\n\r\nconst configCountUp = {\r\n  isCounting: true,\r\n  start: START_TIMING,\r\n  end: END_TIMING,\r\n  decimalPlaces: 1,\r\n  duration: 60,\r\n  easing: \"linear\",\r\n};\r\n\r\nexport { START_TIMING, END_TIMING, WAITING_TIMING, configCountUp };\r\n","import { useState } from \"react\";\r\nimport {\r\n  getComputersCanPlayAndDidNotClick,\r\n  setComputerWhoClicked,\r\n} from \"../utils/player\";\r\nimport { START_TIMING, WAITING_TIMING } from \"../utils/countUp\";\r\n\r\nconst random = () => {\r\n  if (getComputersCanPlayAndDidNotClick().length > 0) {\r\n    const random = Math.random() * START_TIMING;\r\n    return Number(random.toFixed(1));\r\n  }\r\n  return WAITING_TIMING;\r\n};\r\n\r\nconst useComputer = () => {\r\n  const [timingComputer, setTimingComputer] = useState(random());\r\n\r\n  const computerClick = () => {\r\n    const computerClick = selectRandomComputer();\r\n    setComputerWhoClicked(computerClick, timingComputer);\r\n\r\n    // reset click of new computer\r\n    setTimingComputer(random());\r\n  };\r\n\r\n  const selectRandomComputer = () => {\r\n    const computersWhoDidNotClick = getComputersCanPlayAndDidNotClick();\r\n    const indexComputerRandom = Math.random() * computersWhoDidNotClick.length;\r\n    const indexComputerRandomNormalized = Math.trunc(indexComputerRandom);\r\n    return computersWhoDidNotClick[indexComputerRandomNormalized];\r\n  };\r\n\r\n  return { timingComputer, computerClick };\r\n};\r\n\r\nexport default useComputer;\r\n","import * as FONTSIZES from \"../../components/atoms/fontSize\";\r\nimport * as COLORS from \"../../components/atoms/color\";\r\nimport * as UNITS from \"../../components/atoms/unit\";\r\n\r\nconst players = {\r\n  width: UNITS.UNIT_300,\r\n  backgroundColor: COLORS.PLAYERSLIST_BG_WHITE,\r\n  border: `1px solid ${COLORS.PLAYERSLIST_BORDER}`,\r\n  borderRadius: UNITS.UNIT_5,\r\n};\r\n\r\nconst playersTitle = {\r\n  backgroundColor: COLORS.PLAYERSLIST_BG_GREY,\r\n  padding: UNITS.UNIT_10,\r\n  borderRadius: `${UNITS.UNIT_5} ${UNITS.UNIT_5} 0 0`,\r\n};\r\n\r\nconst playersTitleFont = {\r\n  fontSize: FONTSIZES.FONT_SMALL,\r\n  color: COLORS.PLAYERSLIST_TITLE_WHITE,\r\n  fontWeight: \"bold\",\r\n};\r\n\r\nconst playersBody = { padding: UNITS.UNIT_10 };\r\n\r\nconst itemPlayer = { display: \"flex\", alignItems: \"center\" };\r\n\r\nconst imgProfile = { width: UNITS.UNIT_30 };\r\n\r\nconst username = (colorUsername) => ({\r\n  margin: `${UNITS.UNIT_5} ${UNITS.UNIT_10} 0 ${UNITS.UNIT_10}`,\r\n  color: colorUsername,\r\n});\r\n\r\nexport {\r\n  players,\r\n  playersTitle,\r\n  playersTitleFont,\r\n  playersBody,\r\n  itemPlayer,\r\n  imgProfile,\r\n  username,\r\n};\r\n","import React from \"react\";\r\nimport { Stack, Box, Divider } from \"@mui/material\";\r\nimport * as styles from \"./styles\";\r\n\r\nfunction PlayersNow({ playersWhoArePlaying }) {\r\n  return (\r\n    <Box id=\"playersNow\" sx={styles.players}>\r\n      <Box id=\"playersNow-title\" sx={styles.playersTitle}>\r\n        <span style={styles.playersTitleFont}>Players who are playing now</span>\r\n      </Box>\r\n      <Box id=\"playersNow-body\" sx={styles.playersBody}>\r\n        <Stack spacing={1} divider={<Divider />}>\r\n          {playersWhoArePlaying.map((player, index) => (\r\n            <Box key={`${player}-${index}`} sx={styles.itemPlayer}>\r\n              <img\r\n                src=\"https://cdn-icons-png.flaticon.com/512/52/52053.png\"\r\n                style={styles.imgProfile}\r\n                alt=\"Reddit profile\"\r\n              />\r\n              <span style={styles.username(player.colorUsername)}>\r\n                {player.username}\r\n              </span>\r\n            </Box>\r\n          ))}\r\n        </Stack>\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default PlayersNow;\r\n","import * as FONTSIZES from \"../../components/atoms/fontSize\";\r\nimport * as UNITS from \"../../components/atoms/unit\";\r\n\r\nconst contentBody = {\r\n  display: \"flex\",\r\n  justifyContent: \"space-around\",\r\n  alignItems: \"center\",\r\n};\r\n\r\nconst timer = {\r\n  fontSize: FONTSIZES.FONT_TIMER,\r\n  width: UNITS.UNIT_200,\r\n  textAlign: \"center\",\r\n};\r\n\r\nexport { contentBody, timer };\r\n","import React from \"react\";\r\nimport { Box } from \"@mui/material\";\r\nimport { AwesomeButton } from \"react-awesome-button\";\r\nimport { didPlayPlayer } from \"../../utils/player\";\r\nimport {\r\n  KEY_PLAYER,\r\n  getLocalStorage,\r\n  setLocalStorage,\r\n} from \"../../utils/localStorage\";\r\nimport { selectColor } from \"../../utils/colorUsername\";\r\nimport * as styles from \"./styles\";\r\nimport \"react-awesome-button/dist/styles.css\";\r\nimport \"./awesomeButton.css\";\r\n\r\nfunction Timer({ timer, reset, setShowStatistics, setPlayersWhoArePlaying }) {\r\n  const clickButton = () => {\r\n    const timerClicked = Number(timer);\r\n    const player = {\r\n      ...getLocalStorage(KEY_PLAYER),\r\n      timing: timerClicked,\r\n      colorUsername: selectColor(timerClicked),\r\n    };\r\n    setLocalStorage(KEY_PLAYER, player);\r\n    reset();\r\n    setPlayersWhoArePlaying();\r\n    setShowStatistics(true);\r\n  };\r\n\r\n  return (\r\n    <Box id=\"post-content-body\" sx={styles.contentBody}>\r\n      <h1 style={styles.timer}>{timer}</h1>\r\n      <AwesomeButton\r\n        onPress={clickButton}\r\n        disabled={\r\n          !getLocalStorage(KEY_PLAYER) ||\r\n          didPlayPlayer(getLocalStorage(KEY_PLAYER))\r\n        }\r\n      >\r\n        CLICK!\r\n      </AwesomeButton>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Timer;\r\n","import { getPlayers } from \"./player\";\r\nimport { colorIdentifier } from \"../utils/colorUsername\";\r\nimport * as COLORS from \"../components/atoms/color\";\r\n\r\n/* -------------------- BUILDERS -------------------- */\r\n\r\nconst buildData = () => {\r\n  let dataChart = [0, 0, 0, 0, 0, 0, 0, 0, 0];\r\n  const players = getPlayers();\r\n  players.forEach((player) => {\r\n    const idColor = colorIdentifier(player.colorUsername);\r\n    dataChart[idColor] += 1;\r\n  });\r\n  return dataChart;\r\n};\r\n\r\nconst buildConfig = (data) => ({\r\n  labels: [\r\n    \"60s - 52s\",\r\n    \"51.9s - 42s\",\r\n    \"41.9s - 32s\",\r\n    \"31.9s - 22s\",\r\n    \"21.9s - 12s\",\r\n    \"11.9s - 0s\",\r\n    \"Did not click\",\r\n    \"Not able to click\",\r\n  ],\r\n  datasets: [\r\n    {\r\n      data,\r\n      backgroundColor: [\r\n        COLORS.USERNAME_PURPLE,\r\n        COLORS.USERNAME_BLUE,\r\n        COLORS.USERNAME_GREEN,\r\n        COLORS.USERNAME_YELLOW,\r\n        COLORS.USERNAME_ORANGE,\r\n        COLORS.USERNAME_RED,\r\n        COLORS.USERNAME_GREY,\r\n        COLORS.USERNAME_WHITE,\r\n      ],\r\n    },\r\n  ],\r\n});\r\n\r\n/* -------------------- CONFIGS -------------------- */\r\n\r\nconst options = {\r\n  plugins: {\r\n    legend: {\r\n      display: false,\r\n    },\r\n  },\r\n  scales: {\r\n    y: {\r\n      ticks: {\r\n        stepSize: 1,\r\n        beginAtZero: true,\r\n      },\r\n    },\r\n  },\r\n};\r\n\r\nexport { buildData, buildConfig, options };\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { Bar } from \"react-chartjs-2\";\r\nimport { buildData, buildConfig, options } from \"../../utils/chart\";\r\nimport * as UNITS from \"../../components/atoms/unit\";\r\n\r\nfunction Statistics({ playersWhoArePlaying }) {\r\n  const [dataChart, setDataChart] = useState(buildConfig(buildData()));\r\n\r\n  useEffect(() => {\r\n    const data = buildData();\r\n    setDataChart(buildConfig(data));\r\n  }, [playersWhoArePlaying]);\r\n\r\n  return <Bar data={dataChart} options={options} width={UNITS.UNIT_600} height={UNITS.UNIT_300}/>;\r\n}\r\n\r\nexport default Statistics;\r\n","import * as COLORS from \"../../components/atoms/color\";\r\nimport * as UNITS from \"../../components/atoms/unit\";\r\n\r\nconst feedback = {\r\n  display: \"flex\",\r\n  flexDirection: \"column\",\r\n  backgroundColor: COLORS.POST_BG_GREY,\r\n  padding: UNITS.UNIT_5,\r\n  alignItems: \"center\",\r\n  borderRadius: `${UNITS.UNIT_5} 0 0 ${UNITS.UNIT_5}`,\r\n};\r\n\r\nconst countLikes = { padding: `${UNITS.UNIT_5} 0`, margin: 0 };\r\n\r\nconst colorLike = (isEnabled) => {\r\n  return isEnabled ? { color: COLORS.PRIMARY_BUTTON } : { color: COLORS.LIKE_WAITING };\r\n};\r\n\r\nconst colorDislike = (isEnabled) => {\r\n  return isEnabled ? { color: COLORS.ERROR_BUTTON } : { color: COLORS.LIKE_WAITING };\r\n};\r\n\r\nexport { feedback, countLikes, colorLike, colorDislike };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Box, IconButton } from \"@mui/material\";\r\nimport ThumbUpIcon from \"@mui/icons-material/ThumbUp\";\r\nimport ThumbDownIcon from \"@mui/icons-material/ThumbDown\";\r\nimport { KEY_LIKES, getLocalStorage, setLocalStorage } from \"../../utils/localStorage\";\r\nimport {\r\n  START_LIKES,\r\n  didItLike,\r\n  didItDislike,\r\n} from \"../../utils/like\";\r\nimport * as styles from \"./styles\";\r\n\r\nfunction Feedback() {\r\n  const [countLikes, setCountLikes] = useState(\r\n    START_LIKES + getLocalStorage(KEY_LIKES)\r\n  );\r\n  const [like, setLike] = useState(didItLike());\r\n  const [dislike, setDislike] = useState(didItDislike());\r\n\r\n  const handleLike = () => {\r\n    setLike(!like);\r\n    let count = START_LIKES;\r\n\r\n    if (like) {\r\n      count = countLikes - 1;\r\n    } else if (dislike) {\r\n      setDislike(false);\r\n      count = START_LIKES + 1;\r\n    } else {\r\n      count = countLikes + 1;\r\n    }\r\n\r\n    setCountLikes(count);\r\n  };\r\n\r\n  const handleDislike = () => {\r\n    setDislike(!dislike);\r\n    let count = START_LIKES;\r\n\r\n    if (dislike) {\r\n      count = countLikes + 1;\r\n    } else if (like) {\r\n      setLike(false);\r\n      count = START_LIKES - 1;\r\n    } else {\r\n      count = countLikes - 1;\r\n    }\r\n\r\n    setCountLikes(count);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (like) setLocalStorage(KEY_LIKES, 1);\r\n    else if (dislike) setLocalStorage(KEY_LIKES, -1);\r\n    else setLocalStorage(KEY_LIKES, 0);\r\n  }, [like, dislike]);\r\n\r\n  return (\r\n    <Box id=\"post-feedback\" sx={styles.feedback}>\r\n      <IconButton onClick={handleLike} style={styles.colorLike(like)}>\r\n        <ThumbUpIcon />\r\n      </IconButton>\r\n      <p style={styles.countLikes}>{countLikes}</p>\r\n      <IconButton onClick={handleDislike} style={styles.colorDislike(dislike)}>\r\n        <ThumbDownIcon />\r\n      </IconButton>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Feedback;\r\n","import { KEY_LIKES, getLocalStorage } from \"./localStorage\";\r\n\r\n/* -------------------- UTILS -------------------- */\r\n\r\nconst START_LIKES = 7;\r\n\r\nconst didItLike = () => getLocalStorage(KEY_LIKES) == 1;\r\n\r\nconst didItDislike = () => getLocalStorage(KEY_LIKES) == -1;\r\n\r\nexport { START_LIKES, didItLike, didItDislike };\r\n","import * as FONTSIZES from \"../../atoms/fontSize\";\r\nimport * as COLORS from \"../../atoms/color\";\r\nimport * as UNITS from \"../../atoms/unit\";\r\n\r\nconst post = {\r\n  backgroundColor: COLORS.POST_BG_WHITE,\r\n  border: `1px solid ${COLORS.POST_BORDER}`,\r\n  borderRadius: UNITS.UNIT_5,\r\n  width: UNITS.UNIT_650,\r\n  marginRight: UNITS.UNIT_25,\r\n  display: \"flex\",\r\n};\r\n\r\nconst content = { padding: UNITS.UNIT_10};\r\n\r\nconst contentTitle = {\r\n  fontSize: FONTSIZES.FONT_NORMAL,\r\n  margin: 0,\r\n  lineHeight: UNITS.UNIT_25,\r\n};\r\n\r\nconst posted = {\r\n  margin: `0 0 ${UNITS.UNIT_10} 0`,\r\n  fontSize: FONTSIZES.FONT_TINY_SMALL,\r\n  color: COLORS.POST_POSTED,\r\n};\r\n\r\nexport { post, content, contentTitle, posted };\r\n","import React from \"react\";\r\nimport { Box } from \"@mui/material\";\r\nimport Feedback from \"../../../containers/feedback\";\r\nimport * as styles from \"./styles\";\r\n\r\nfunction Post({ posted, leftBar, title, chip, children }) {\r\n  return (\r\n    <Box id=\"post\" sx={styles.post}>\r\n      {leftBar && <Feedback />}\r\n      <Box id=\"post-content\" sx={styles.content}>\r\n        <p id=\"post-posted\" style={styles.posted}>\r\n          {posted}\r\n        </p>\r\n        <h1 id=\"post-content-title\" style={styles.contentTitle}>\r\n          {chip}\r\n          {title}\r\n        </h1>\r\n        {children}\r\n      </Box>\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Post;\r\n","import * as UNITS from \"../../components/atoms/unit\";\r\n\r\nconst app = { display: \"flex\", alignItems: \"flex-start\" };\r\n\r\nconst chip = { marginRight: UNITS.UNIT_5 };\r\n\r\nconst stack = { display: \"flex\", flexDirection: \"column\" }\r\n\r\nexport { app, chip, stack };\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { Box, Chip, Stack } from \"@mui/material\";\r\nimport { useCountUp } from \"use-count-up\";\r\nimport useComputer from \"../../hooks/computer\";\r\nimport { getPlayersCanPlay, didPlayPlayer } from \"../../utils/player\";\r\nimport { KEY_PLAYER, getLocalStorage } from \"../../utils/localStorage\";\r\nimport { configCountUp } from \"../../utils/countUp\";\r\nimport PlayersNow from \"../../containers/playersNow\";\r\nimport Timer from \"../../containers/timer\";\r\nimport Statistics from \"../../containers/statistics\";\r\nimport Post from \"../../components/organisms/post\";\r\nimport * as styles from \"./styles\";\r\n\r\nfunction Game() {\r\n  const { timingComputer, computerClick } = useComputer();\r\n\r\n  // hook temporizador\r\n  const { value, reset } = useCountUp(configCountUp);\r\n\r\n  const [playersWhoArePlaying, setPlayersWhoArePlaying] = useState(\r\n    getPlayersCanPlay()\r\n  );\r\n  const [showStatistics, setShowStatistics] = useState(didPlayPlayer());\r\n\r\n  const updatePlayersWhoArePlaying = () =>\r\n    setPlayersWhoArePlaying(getPlayersCanPlay());\r\n\r\n  useEffect(() => {\r\n    // temporizador === click de la computadora\r\n    if (Number(value) === timingComputer) {\r\n      computerClick();\r\n      reset();\r\n      updatePlayersWhoArePlaying();\r\n    }\r\n  }, [value]);\r\n\r\n  return (\r\n    <Box id=\"timer-app\" sx={styles.app}>\r\n      <Stack spacing={2} sx={styles.stack}>\r\n        <Post\r\n          posted=\"Posted by u/ghernandez 13 minutes ago\"\r\n          chip={<Chip label=\"Games 🎮\" size=\"small\" style={styles.chip} />}\r\n          title=\"April Fools Day: You will get a color for your username depends on\r\n          the interval you clicked!\"\r\n          leftBar\r\n        >\r\n          <Timer\r\n            timer={value}\r\n            reset={reset}\r\n            setShowStatistics={setShowStatistics}\r\n            setPlayersWhoArePlaying={updatePlayersWhoArePlaying}\r\n          />\r\n        </Post>\r\n        {showStatistics && (\r\n          <Post\r\n            posted=\"Posted by u/ghernandez now\"\r\n            chip={\r\n              <Chip label=\"Statistics 📈\" size=\"small\" style={styles.chip} />\r\n            }\r\n            title=\"Statistics of April Fools Day!\"\r\n          >\r\n            <Statistics playersWhoArePlaying={playersWhoArePlaying} />\r\n          </Post>\r\n        )}\r\n      </Stack>\r\n      <PlayersNow\r\n        timingComputer={timingComputer}\r\n        playersWhoArePlaying={playersWhoArePlaying}\r\n      />\r\n    </Box>\r\n  );\r\n}\r\n\r\nexport default Game;\r\n","const container = {\r\n    height: '100vh',\r\n    display: \"flex\",\r\n    alignItems: 'center',\r\n    justifyContent: \"center\",\r\n  };\r\n  \r\n  const title = { fontSize: 80 };\r\n  \r\n  export { container, title };\r\n  ","import React, { useState } from \"react\";\nimport { Container } from \"@mui/material\";\nimport { CSSTransition } from \"react-transition-group\";\nimport { getLocalStorage } from \"./utils/localStorage\";\nimport Player from \"./views/register\";\nimport Game from \"./views/game\";\nimport \"./App.css\";\nimport * as styles from \"./App-styles\";\n\nfunction App() {\n  const [showLogin, setShowLogin] = useState(\n    getLocalStorage(\"player\") ? false : true\n  );\n  const [showGame, setShowGame] = useState(\n    getLocalStorage(\"player\") ? true : false\n  );\n\n  return (\n    <div className=\"App\">\n      <Container maxWidth=\"lg\" style={styles.container}>\n        <CSSTransition\n          in={showGame}\n          timeout={400}\n          classNames=\"slide1\"\n          unmountOnExit\n        >\n          <Game />\n        </CSSTransition>\n        <CSSTransition\n          in={showLogin}\n          timeout={100}\n          classNames=\"slide2\"\n          unmountOnExit\n        >\n          <Player\n            setShowGame={() => {\n              setShowGame(true);\n              setShowLogin(false);\n            }}\n          />\n        </CSSTransition>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { createTheme, ThemeProvider } from \"@mui/material/styles\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as COLORS from \"./components/atoms/color\";\n\nconst theme = createTheme({\n  palette: {\n    primary: {\n      main: COLORS.PRIMARY,\n    },\n  },\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider theme={theme}>\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}